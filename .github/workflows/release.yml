name: Release
on:
  workflow_dispatch:
env:
  NODE_VERSION: 14
  KEPTN_BOT_NAME: "Keptn Bot"
  KEPTN_BOT_EMAIL: "keptn-bot <86361500+keptn-bot@users.noreply.github.com>"
  RELEASE_NOTES_FILE: "RELEASE-BODY.md"
  RELEASE_BUILD: 'true'
  BUILD_EVERYTHING: 'true'

  BRIDGE_ARTIFACT_PREFIX: "BRIDGE"
  API_ARTIFACT_PREFIX: "API"
  OS_ROUTE_SVC_ARTIFACT_PREFIX: "OS_ROUTE_SVC"
  JMETER_SVC_ARTIFACT_PREFIX: "JMETER_SVC"
  HELM_SVC_ARTIFACT_PREFIX: "HELM_SVC"
  APPROVAL_SVC_ARTIFACT_PREFIX: "APPROVAL_SVC"
  DISTRIBUTOR_ARTIFACT_PREFIX: "DISTRIBUTOR"
  SHIPYARD_CONTROLLER_ARTIFACT_PREFIX: "SHIPYARD_CONTROLLER"
  SECRET_SVC_ARTIFACT_PREFIX: "SECRET_SVC"
  CONFIGURATION_SVC_ARTIFACT_PREFIX: "CONFIGURATION_SVC"
  REMEDIATION_SVC_ARTIFACT_PREFIX: "REMEDIATION_SVC"
  LIGHTHOUSE_SVC_ARTIFACT_PREFIX: "LIGHTHOUSE_SVC"
  MONGODB_DS_ARTIFACT_PREFIX: "MONGODB_DS"
  STATISTICS_SVC_ARTIFACT_PREFIX: "STATISTICS_SVC"
  WEBHOOK_SVC_ARTIFACT_PREFIX: "WEBHOOK_SVC"

  BRIDGE_ARTIFACT: "bridge2"
  BRIDGE_FOLDER: "bridge/"
  BRIDGE_DOCKER_TEST_TARGET: "builder-test-unit"

  API_ARTIFACT: "api"
  API_FOLDER: "api/"
  API_DOCKER_TEST_TARGET: "builder-test"

  OS_ROUTE_SVC_ARTIFACT: "openshift-route-service"
  OS_ROUTE_SVC_FOLDER: "platform-support/openshift-route-service/"
  OS_ROUTE_SVC_DOCKER_TEST_TARGET: "builder-test"

  JMETER_SVC_ARTIFACT: "jmeter-service"
  JMETER_SVC_FOLDER: "jmeter-service/"
  JMETER_SVC_DOCKER_TEST_TARGET: "builder-test"

  HELM_SVC_ARTIFACT: "helm-service"
  HELM_SVC_FOLDER: "helm-service/"
  HELM_SVC_DOCKER_TEST_TARGET: "builder-test"

  APPROVAL_SVC_ARTIFACT: "approval-service"
  APPROVAL_SVC_FOLDER: "approval-service/"
  APPROVAL_SVC_DOCKER_TEST_TARGET: "builder-test"

  DISTRIBUTOR_ARTIFACT: "distributor"
  DISTRIBUTOR_FOLDER: "distributor/"
  DISTRIBUTOR_DOCKER_TEST_TARGET: "builder-test"

  SHIPYARD_CONTROLLER_ARTIFACT: "shipyard-controller"
  SHIPYARD_CONTROLLER_FOLDER: "shipyard-controller/"
  SHIPYARD_CONTROLLER_DOCKER_TEST_TARGET: "builder-test"

  SECRET_SVC_ARTIFACT: "secret-service"
  SECRET_SVC_FOLDER: "secret-service/"
  SECRET_SVC_DOCKER_TEST_TARGET: "builder-test"

  CONFIGURATION_SVC_ARTIFACT: "configuration-service"
  CONFIGURATION_SVC_FOLDER: "configuration-service/"
  CONFIGURATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  REMEDIATION_SVC_ARTIFACT: "remediation-service"
  REMEDIATION_SVC_FOLDER: "remediation-service/"
  REMEDIATION_SVC_DOCKER_TEST_TARGET: "builder-test"

  LIGHTHOUSE_SVC_ARTIFACT: "lighthouse-service"
  LIGHTHOUSE_SVC_FOLDER: "lighthouse-service/"
  LIGHTHOUSE_SVC_DOCKER_TEST_TARGET: "builder-test"

  MONGODB_DS_ARTIFACT: "mongodb-datastore"
  MONGODB_DS_FOLDER: "mongodb-datastore/"
  MONGODB_DS_DOCKER_TEST_TARGET: "builder-test"

  STATISTICS_SVC_ARTIFACT: "statistics-service"
  STATISTICS_SVC_FOLDER: "statistics-service/"
  STATISTICS_SVC_DOCKER_TEST_TARGET: "builder-test"

  WEBHOOK_SVC_ARTIFACT: "webhook-service"
  WEBHOOK_SVC_FOLDER: "webhook-service/"
  WEBHOOK_SVC_DOCKER_TEST_TARGET: "builder-test"
defaults:
  run:
    shell: bash
jobs:
  prepare:
    name: Prepare release run
    runs-on: ubuntu-20.04
    outputs:
      next-version: ${{ steps.version_number.outputs.next-version }}
      branch: ${{ steps.current_branch.outputs.branch }}
      keptn-spec-version: ${{ steps.keptn_spec_version.outputs.keptn-spec-version }}
      BUILD_EVERYTHING: ${{ steps.build_everything.outputs.BUILD_EVERYTHING }}
      BUILD_INSTALLER: ${{ steps.check_modified_files.outputs.BUILD_INSTALLER }}
      BUILD_CLI: ${{ steps.check_modified_files.outputs.BUILD_CLI }}
      BUILD_MATRIX: ${{ steps.check_modified_files.outputs.BUILD_MATRIX }}
      BUILD_MATRIX_EMPTY: ${{ steps.check_modified_files.outputs.BUILD_MATRIX_EMPTY }}
    steps:
      - name: Find next version number
        id: version_number
        run: |
          npx standard-version@^9.3.1 --skip.commit --skip.tag --skip.changelog
          NEXT_VERSION=$(cat VERSION.txt)
          echo "::set-output name=next-version::${NEXT_VERSION}"
          git checkout HEAD -- VERSION.txt

      - name: Find current branch
        id: current_branch
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo "::set-output name=branch::${branch}"

      - name: Get keptn spec version
        id: keptn_spec_version
        run: |
          git submodule update --init
          cd specification
          KEPTN_SPEC_VERSION=$(git describe --tags)
          echo "::set-output name=keptn-spec-version::${KEPTN_SPEC_VERSION}"

      - name: Prepare artifact build matrix
        id: check_modified_files
        env:
          BUILD_EVERYTHING: true
        run: |
          ./gh-actions-scripts/prepare_changed_artifacts.sh ""

  ############################################################################
  # Build Docker Images                                                      #
  ############################################################################
  docker_build:
    needs: [prepare_ci_run]
    name: Docker Build
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.BUILD_MATRIX) }}
    env:
      BRANCH: ${{ needs.prepare.outputs.branch }}
      VERSION: ${{ needs.prepare.outputs.next-version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        # only run docker login on pushes; also for PRs, but only if this is not a fork
        if: matrix.config.should-push-image == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event.pull_request.head.repo.full_name == github.repository)
        # note: GH does not allow to access secrets for PRs from a forked repositories due to security reasons
        # that's fine, but it means we can't push images to dockerhub
        with:
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - id: docker_build_image
        name: "Docker Build keptn/${{ matrix.config.artifact }}"
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.config.working-dir }}
          tags: |
            keptn/${{ matrix.config.artifact }}:${{ env.VERSION }}
          build-args: |
            version=${{ env.VERSION }}
          push: ${{ matrix.config.should-push-image }}
          pull: true

  ############################################################################
  # Build Helm Charts (only relevant for build_everything)
  ############################################################################
  build-helm-charts:
    needs: prepare
    name: Build Helm Charts
    uses: keptn/keptn/.github/workflows/build-helm-charts.yml@chore/release-automation
    with:
      branch: ${{ needs.prepare.outputs.branch }}
      version: ${{ needs.prepare.outputs.next-version }}
      keptn-spec-version: ${{ needs.prepare.outputs.keptn-spec-version }}
      release: ${{ env.RELEASE_BUILD }}

  ############################################################################
  # Build CLI
  ############################################################################
  build-cli:
    needs: [prepare_ci_run]
    if: (needs.prepare_ci_run.outputs.BUILD_EVERYTHING == 'true') || (needs.prepare_ci_run.outputs.BUILD_CLI == 'true')
    uses: keptn/keptn/.github/workflows/build-cli.yml@chore/release-automation
    with:
      branch: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      version: ${{ needs.prepare_ci_run.outputs.VERSION }}
      release: ${{ env.RELEASE_BUILD }}

  ############################################################################
  # Release
  ############################################################################
  release:
    name: "Release"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.KEPTN_BOT_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        env:
          KEPTN_BOT_NAME: ${{ env.KEPTN_BOT_NAME }}
          KEPTN_BOT_EMAIL: ${{ env.KEPTN_BOT_EMAIL }}
        run: |
          git config user.name "$KEPTN_BOT_NAME"
          git config user.email "$KEPTN_BOT_EMAIL"

      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./dist

      - name: Prepare GitHub Release Notes
        run: |
          # Delete pre-release tags to be able to generate a changelog from last 'real' release
          # This is a workaround for a known limitation of standard-version
          # Reference: https://github.com/conventional-changelog/standard-version/issues/203#issuecomment-872415140
          git tag -l | grep -vE '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$' | xargs git tag -d

          npx standard-version@^9.3.1 -i "${{ env.RELEASE_NOTES_FILE }}" --skip.commit --skip.tag --header ""

      - name: Temporarily disable "include administrators" branch protection
        uses: benjefferies/branch-protection-bot@6d0ac2b2d9bfd39794b017f8241adb7da7f0ab98 # pin@1.0.7
        with:
          access_token: ${{ secrets.KEPTN_BOT_TOKEN }}
          branch: ${{ github.event.repository.default_branch }}
          enforce_admins: false

      - name: Create release package
        id: create-release-package
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
        run: |
          echo "üöÄ Creating release package now..."
          npx standard-version@^9.3.1

          echo "::set-output name=tag-name::$(git describe --tags --abbrev=0)"

          echo "Fetching previously deleted old tags..."
          git fetch origin --tags -f
          echo "‚ö°Ô∏è Pushing changes to remote repository..."
          git push --follow-tags

      - name: Enable "include administrators" branch protection
        uses: benjefferies/branch-protection-bot@6d0ac2b2d9bfd39794b017f8241adb7da7f0ab98 # pin@1.0.7
        if: always() # Force to always run this step to ensure "include administrators" is always turned back on
        with:
          access_token: ${{ secrets.KEPTN_BOT_TOKEN }}
          branch: ${{ github.event.repository.default_branch }}
          enforce_admins: true

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          gh release create "$RELEASE_TAG" --draft --notes-file "${{ env.RELEASE_NOTES_FILE }}" --title "$RELEASE_TAG"

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.KEPTN_BOT_TOKEN }}
          RELEASE_TAG: ${{ steps.create-release-package.outputs.tag-name }}
        run: |
          gh release upload "$RELEASE_TAG" ./dist/keptn-installer/*.tgz
          gh release upload "$RELEASE_TAG" ./dist/keptn-cli/*.tgz
